
./rv32im_main.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <my_start>:

my_start:
    
    /* setup stack pointer */
    
    lui sp, %hi(STACK_POINTER)
   0:	00010137          	lui	sp,0x10
    addi sp, sp, %lo(STACK_POINTER)
   4:	00010113          	mv	sp,sp
    
    call main
   8:	004000ef          	jal	ra,c <main>

0000000c <main>:
 **********************************/

main:
    /* zero-initialize all registers */

    addi x1, zero, 0
   c:	00000093          	li	ra,0
    addi x2, zero, 0
    addi x3, zero, 0
    addi x4, zero, 0
    */
    
    addi x5, zero, 0
  10:	00000293          	li	t0,0
    addi x6, zero, 0
  14:	00000313          	li	t1,0
    addi x7, zero, 0
  18:	00000393          	li	t2,0
    addi x8, zero, 0
  1c:	00000413          	li	s0,0
    addi x9, zero, 0
  20:	00000493          	li	s1,0
    addi x10, zero, 0
  24:	00000513          	li	a0,0
    addi x11, zero, 0
  28:	00000593          	li	a1,0
    addi x12, zero, 0
  2c:	00000613          	li	a2,0
    addi x13, zero, 0
  30:	00000693          	li	a3,0
    addi x14, zero, 0
  34:	00000713          	li	a4,0
    addi x15, zero, 0
  38:	00000793          	li	a5,0
    addi x16, zero, 0
  3c:	00000813          	li	a6,0
    addi x17, zero, 0
  40:	00000893          	li	a7,0
    addi x18, zero, 0
  44:	00000913          	li	s2,0
    addi x19, zero, 0
  48:	00000993          	li	s3,0
    addi x20, zero, 0
  4c:	00000a13          	li	s4,0
    addi x21, zero, 0
  50:	00000a93          	li	s5,0
    addi x22, zero, 0
  54:	00000b13          	li	s6,0
    addi x23, zero, 0
  58:	00000b93          	li	s7,0
    addi x24, zero, 0
  5c:	00000c13          	li	s8,0
    addi x25, zero, 0
  60:	00000c93          	li	s9,0
    addi x26, zero, 0
  64:	00000d13          	li	s10,0
    addi x27, zero, 0
  68:	00000d93          	li	s11,0
    addi x28, zero, 0
  6c:	00000e13          	li	t3,0
    addi x29, zero, 0
  70:	00000e93          	li	t4,0
    addi x30, zero, 0
  74:	00000f13          	li	t5,0
    addi x31, zero, 0
  78:	00000f93          	li	t6,0
    /*
    lui sp, %hi(STACK_POINTER)
    addi sp, sp, %lo(STACK_POINTER)
    */
    
    call my_main
  7c:	278000ef          	jal	ra,2f4 <my_main>
    by the axi_detector.
    After that it theoretically enteres an endelss loop, but practically the
    CPU should be turned off before the instruction can be read.
    */
    
    lui     a5,0x1000
  80:	010007b7          	lui	a5,0x1000
    addi    a5,a5,-4 # fffffc <__global_pointer$+0xffdf84>
  84:	ffc78793          	addi	a5,a5,-4 # fffffc <__BSS_END__+0xfbeaf0>
    lui     a4,0x1000
  88:	01000737          	lui	a4,0x1000
    addi    a4,a4,-4 # fffffc <__global_pointer$+0xffdf84>
  8c:	ffc70713          	addi	a4,a4,-4 # fffffc <__BSS_END__+0xfbeaf0>
    sw      a4,0(a5)
  90:	00e7a023          	sw	a4,0(a5)

00000094 <loop>:

loop:
    j loop
  94:	0000006f          	j	94 <loop>

00000098 <sobel_filter>:
#define HEIGHT 8
// #define WIDTH 512
#define WIDTH 8

void sobel_filter(unsigned int in[HEIGHT][WIDTH],
                  unsigned int out[HEIGHT][WIDTH]) {
  98:	fc010113          	addi	sp,sp,-64 # ffc0 <elaine_512_golden_output+0xeab4>
  9c:	02812e23          	sw	s0,60(sp)
  a0:	04010413          	addi	s0,sp,64
  a4:	fca42623          	sw	a0,-52(s0)
  a8:	fcb42423          	sw	a1,-56(s0)

    // The 3x3 Sobel filters.
    const static int gx[3][3] = {{-1, 0, 1}, {-2, 0, 2}, {-1, 0, 1}};
    const static int gy[3][3] = {{1, 2, 1}, {0, 0, 0}, {-1, -2, -1}};

    for (int i = 0; i < HEIGHT; i++) {
  ac:	fe042623          	sw	zero,-20(s0)
  b0:	2280006f          	j	2d8 <sobel_filter+0x240>
        for (int j = 0; j < WIDTH; j++) {
  b4:	fe042423          	sw	zero,-24(s0)
  b8:	2080006f          	j	2c0 <sobel_filter+0x228>
            // Set output to 0 if the 3x3 receptive field is out of bound.
            if ((i < 1) | (i > HEIGHT - 2) | (j < 1) | (j > WIDTH - 2)) {
  bc:	fec42783          	lw	a5,-20(s0)
  c0:	0017a793          	slti	a5,a5,1
  c4:	0ff7f713          	andi	a4,a5,255
  c8:	fec42783          	lw	a5,-20(s0)
  cc:	0077a793          	slti	a5,a5,7
  d0:	0017c793          	xori	a5,a5,1
  d4:	0ff7f793          	andi	a5,a5,255
  d8:	00f767b3          	or	a5,a4,a5
  dc:	0ff7f793          	andi	a5,a5,255
  e0:	00078713          	mv	a4,a5
  e4:	fe842783          	lw	a5,-24(s0)
  e8:	0017a793          	slti	a5,a5,1
  ec:	0ff7f793          	andi	a5,a5,255
  f0:	00f767b3          	or	a5,a4,a5
  f4:	fe842703          	lw	a4,-24(s0)
  f8:	00772713          	slti	a4,a4,7
  fc:	00174713          	xori	a4,a4,1
 100:	0ff77713          	andi	a4,a4,255
 104:	00e7e7b3          	or	a5,a5,a4
 108:	02078463          	beqz	a5,130 <sobel_filter+0x98>
                out[i][j] = 0;
 10c:	fec42783          	lw	a5,-20(s0)
 110:	00579793          	slli	a5,a5,0x5
 114:	fc842703          	lw	a4,-56(s0)
 118:	00f70733          	add	a4,a4,a5
 11c:	fe842783          	lw	a5,-24(s0)
 120:	00279793          	slli	a5,a5,0x2
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a023          	sw	zero,0(a5)
                continue;
 12c:	1880006f          	j	2b4 <sobel_filter+0x21c>
            }

            // Apply the sobel filter at the current "receptive field".
            int gx_sum = 0, gy_sum = 0;
 130:	fe042223          	sw	zero,-28(s0)
 134:	fe042023          	sw	zero,-32(s0)
            for (int m = -1; m <= 1; m++) {
 138:	fff00793          	li	a5,-1
 13c:	fcf42e23          	sw	a5,-36(s0)
 140:	0f00006f          	j	230 <sobel_filter+0x198>
                for (int n = -1; n <= 1; n++) {
 144:	fff00793          	li	a5,-1
 148:	fcf42c23          	sw	a5,-40(s0)
 14c:	0cc0006f          	j	218 <sobel_filter+0x180>
                    int pixel = in[i + m][j + n];
 150:	fec42703          	lw	a4,-20(s0)
 154:	fdc42783          	lw	a5,-36(s0)
 158:	00f707b3          	add	a5,a4,a5
 15c:	00579793          	slli	a5,a5,0x5
 160:	fcc42703          	lw	a4,-52(s0)
 164:	00f70733          	add	a4,a4,a5
 168:	fe842683          	lw	a3,-24(s0)
 16c:	fd842783          	lw	a5,-40(s0)
 170:	00f687b3          	add	a5,a3,a5
 174:	00279793          	slli	a5,a5,0x2
 178:	00f707b3          	add	a5,a4,a5
 17c:	0007a783          	lw	a5,0(a5)
 180:	fcf42a23          	sw	a5,-44(s0)
                    gx_sum += pixel * gx[m + 1][n + 1];
 184:	fdc42783          	lw	a5,-36(s0)
 188:	00178713          	addi	a4,a5,1
 18c:	fd842783          	lw	a5,-40(s0)
 190:	00178613          	addi	a2,a5,1
 194:	00070793          	mv	a5,a4
 198:	00179793          	slli	a5,a5,0x1
 19c:	00e787b3          	add	a5,a5,a4
 1a0:	00c787b3          	add	a5,a5,a2
 1a4:	00279713          	slli	a4,a5,0x2
 1a8:	3c400793          	li	a5,964
 1ac:	00f707b3          	add	a5,a4,a5
 1b0:	0007a703          	lw	a4,0(a5)
 1b4:	fd442783          	lw	a5,-44(s0)
 1b8:	02f707b3          	mul	a5,a4,a5
 1bc:	fe442703          	lw	a4,-28(s0)
 1c0:	00f707b3          	add	a5,a4,a5
 1c4:	fef42223          	sw	a5,-28(s0)
                    gy_sum += pixel * gy[m + 1][n + 1];
 1c8:	fdc42783          	lw	a5,-36(s0)
 1cc:	00178713          	addi	a4,a5,1
 1d0:	fd842783          	lw	a5,-40(s0)
 1d4:	00178613          	addi	a2,a5,1
 1d8:	00070793          	mv	a5,a4
 1dc:	00179793          	slli	a5,a5,0x1
 1e0:	00e787b3          	add	a5,a5,a4
 1e4:	00c787b3          	add	a5,a5,a2
 1e8:	00279713          	slli	a4,a5,0x2
 1ec:	3e800793          	li	a5,1000
 1f0:	00f707b3          	add	a5,a4,a5
 1f4:	0007a703          	lw	a4,0(a5)
 1f8:	fd442783          	lw	a5,-44(s0)
 1fc:	02f707b3          	mul	a5,a4,a5
 200:	fe042703          	lw	a4,-32(s0)
 204:	00f707b3          	add	a5,a4,a5
 208:	fef42023          	sw	a5,-32(s0)
                for (int n = -1; n <= 1; n++) {
 20c:	fd842783          	lw	a5,-40(s0)
 210:	00178793          	addi	a5,a5,1
 214:	fcf42c23          	sw	a5,-40(s0)
 218:	fd842703          	lw	a4,-40(s0)
 21c:	00100793          	li	a5,1
 220:	f2e7d8e3          	bge	a5,a4,150 <sobel_filter+0xb8>
            for (int m = -1; m <= 1; m++) {
 224:	fdc42783          	lw	a5,-36(s0)
 228:	00178793          	addi	a5,a5,1
 22c:	fcf42e23          	sw	a5,-36(s0)
 230:	fdc42703          	lw	a4,-36(s0)
 234:	00100793          	li	a5,1
 238:	f0e7d6e3          	bge	a5,a4,144 <sobel_filter+0xac>
                }
            }

            gx_sum = (gx_sum < 0) ? -gx_sum : gx_sum;
 23c:	fe442783          	lw	a5,-28(s0)
 240:	41f7d793          	srai	a5,a5,0x1f
 244:	fe442703          	lw	a4,-28(s0)
 248:	00f74733          	xor	a4,a4,a5
 24c:	40f707b3          	sub	a5,a4,a5
 250:	fef42223          	sw	a5,-28(s0)
            gy_sum = (gy_sum < 0) ? -gy_sum : gy_sum;
 254:	fe042783          	lw	a5,-32(s0)
 258:	41f7d793          	srai	a5,a5,0x1f
 25c:	fe042703          	lw	a4,-32(s0)
 260:	00f74733          	xor	a4,a4,a5
 264:	40f707b3          	sub	a5,a4,a5
 268:	fef42023          	sw	a5,-32(s0)

            int sum = gx_sum + gy_sum;
 26c:	fe442703          	lw	a4,-28(s0)
 270:	fe042783          	lw	a5,-32(s0)
 274:	00f707b3          	add	a5,a4,a5
 278:	fcf42823          	sw	a5,-48(s0)
            sum = (sum > 31) ? 31 : sum;
 27c:	fd042783          	lw	a5,-48(s0)
 280:	01f00713          	li	a4,31
 284:	00f75463          	bge	a4,a5,28c <sobel_filter+0x1f4>
 288:	01f00793          	li	a5,31
 28c:	fcf42823          	sw	a5,-48(s0)
            // sum = (sum > 255) ? 255 : sum;

            out[i][j] = (unsigned int)sum;
 290:	fec42783          	lw	a5,-20(s0)
 294:	00579793          	slli	a5,a5,0x5
 298:	fc842703          	lw	a4,-56(s0)
 29c:	00f706b3          	add	a3,a4,a5
 2a0:	fd042703          	lw	a4,-48(s0)
 2a4:	fe842783          	lw	a5,-24(s0)
 2a8:	00279793          	slli	a5,a5,0x2
 2ac:	00f687b3          	add	a5,a3,a5
 2b0:	00e7a023          	sw	a4,0(a5)
        for (int j = 0; j < WIDTH; j++) {
 2b4:	fe842783          	lw	a5,-24(s0)
 2b8:	00178793          	addi	a5,a5,1
 2bc:	fef42423          	sw	a5,-24(s0)
 2c0:	fe842703          	lw	a4,-24(s0)
 2c4:	00700793          	li	a5,7
 2c8:	dee7dae3          	bge	a5,a4,bc <sobel_filter+0x24>
    for (int i = 0; i < HEIGHT; i++) {
 2cc:	fec42783          	lw	a5,-20(s0)
 2d0:	00178793          	addi	a5,a5,1
 2d4:	fef42623          	sw	a5,-20(s0)
 2d8:	fec42703          	lw	a4,-20(s0)
 2dc:	00700793          	li	a5,7
 2e0:	dce7dae3          	bge	a5,a4,b4 <sobel_filter+0x1c>
        }
    }
}
 2e4:	00000013          	nop
 2e8:	03c12403          	lw	s0,60(sp)
 2ec:	04010113          	addi	sp,sp,64
 2f0:	00008067          	ret

000002f4 <my_main>:

int my_main() {
 2f4:	ee010113          	addi	sp,sp,-288
 2f8:	10112e23          	sw	ra,284(sp)
 2fc:	10812c23          	sw	s0,280(sp)
 300:	12010413          	addi	s0,sp,288
    unsigned int sobel_output[HEIGHT][WIDTH];

    sobel_filter(elaine_512_input, sobel_output);
 304:	ee440793          	addi	a5,s0,-284
 308:	00078593          	mv	a1,a5
 30c:	000017b7          	lui	a5,0x1
 310:	40c78513          	addi	a0,a5,1036 # 140c <elaine_512_input>
 314:	d85ff0ef          	jal	ra,98 <sobel_filter>

    // Verify output by comparing against a golden output.
    int mismatch_count = 0;
 318:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < HEIGHT; i++)
 31c:	fe042423          	sw	zero,-24(s0)
 320:	0800006f          	j	3a0 <my_main+0xac>
        for (int j = 0; j < WIDTH; j++)
 324:	fe042223          	sw	zero,-28(s0)
 328:	0600006f          	j	388 <my_main+0x94>
            if (sobel_output[i][j] != elaine_512_golden_output[i][j])
 32c:	fe842783          	lw	a5,-24(s0)
 330:	00379713          	slli	a4,a5,0x3
 334:	fe442783          	lw	a5,-28(s0)
 338:	00f707b3          	add	a5,a4,a5
 33c:	00279793          	slli	a5,a5,0x2
 340:	ff040713          	addi	a4,s0,-16
 344:	00f707b3          	add	a5,a4,a5
 348:	ef47a783          	lw	a5,-268(a5)
 34c:	00001737          	lui	a4,0x1
 350:	fe842683          	lw	a3,-24(s0)
 354:	00969693          	slli	a3,a3,0x9
 358:	50c70713          	addi	a4,a4,1292 # 150c <elaine_512_golden_output>
 35c:	00e686b3          	add	a3,a3,a4
 360:	fe442703          	lw	a4,-28(s0)
 364:	00e68733          	add	a4,a3,a4
 368:	00074703          	lbu	a4,0(a4)
 36c:	00e78863          	beq	a5,a4,37c <my_main+0x88>
                mismatch_count++;
 370:	fec42783          	lw	a5,-20(s0)
 374:	00178793          	addi	a5,a5,1
 378:	fef42623          	sw	a5,-20(s0)
        for (int j = 0; j < WIDTH; j++)
 37c:	fe442783          	lw	a5,-28(s0)
 380:	00178793          	addi	a5,a5,1
 384:	fef42223          	sw	a5,-28(s0)
 388:	fe442703          	lw	a4,-28(s0)
 38c:	00700793          	li	a5,7
 390:	f8e7dee3          	bge	a5,a4,32c <my_main+0x38>
    for (int i = 0; i < HEIGHT; i++)
 394:	fe842783          	lw	a5,-24(s0)
 398:	00178793          	addi	a5,a5,1
 39c:	fef42423          	sw	a5,-24(s0)
 3a0:	fe842703          	lw	a4,-24(s0)
 3a4:	00700793          	li	a5,7
 3a8:	f6e7dee3          	bge	a5,a4,324 <my_main+0x30>
    // if (mismatch_count == 0)
    //     printf("PASS!\n");
    // else
    //     printf("FAIL with %d differences\n", mismatch_count);

    return mismatch_count;
 3ac:	fec42783          	lw	a5,-20(s0)
}
 3b0:	00078513          	mv	a0,a5
 3b4:	11c12083          	lw	ra,284(sp)
 3b8:	11812403          	lw	s0,280(sp)
 3bc:	12010113          	addi	sp,sp,288
 3c0:	00008067          	ret
